option(LINUX_MINGW32 "Build for windows on Linux" OFF)

if(LINUX_MINGW32)
    set(CMAKE_SYSTEM_NAME Windows)
    set(TOOLCHAIN_PREFIX x86_64-w64-mingw32)

    set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
    set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
    set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)
    set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)

    set(CMAKE_FIND_ROOT_PATH /usr/${TOOLCHAIN_PREFIX})

    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

cmake_minimum_required (VERSION 2.8.12)
project (lpac)

set(BUILD_SHARED_AND_STATIC_LIBS ON CACHE BOOL "" FORCE)
set(ENABLE_CJSON_TEST OFF CACHE BOOL "" FORCE)
set(ENABLE_CJSON_UTILS OFF CACHE BOOL "" FORCE)
set(ENABLE_LOCALES OFF CACHE BOOL "" FORCE)
set(ENABLE_CJSON_UNINSTALL OFF CACHE BOOL "" FORCE)
set(ENABLE_CUSTOM_COMPILER_FLAGS OFF CACHE BOOL "" FORCE)
add_subdirectory(cjson)
unset(ENABLE_CJSON_TEST)
unset(ENABLE_CJSON_UTILS)
unset(ENABLE_LOCALES)
unset(ENABLE_CJSON_UNINSTALL)
unset(ENABLE_CUSTOM_COMPILER_FLAGS)
unset(BUILD_SHARED_AND_STATIC_LIBS)

include_directories(.)
add_subdirectory(euicc)
add_subdirectory(interface)
add_subdirectory(src)
